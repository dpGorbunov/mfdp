#!/usr/bin/env python3
# test_existing_user.py - –¢–µ—Å—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
import requests
import json

API_BASE_URL = "http://localhost:8000"

print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
print("=" * 60)

# –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
test_credentials = [
    {"email": "user1@test.com", "password": "instacart123"},
    {"email": "user2@test.com", "password": "instacart123"},
    {"email": "admin@example.com", "password": "admin123"},
]

token = None
user_info = None

for creds in test_credentials:
    print(f"\nüîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {creds['email']}")
    response = requests.post(f"{API_BASE_URL}/auth/login", json=creds)

    if response.status_code == 200:
        print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
        token = response.json()["access_token"]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{API_BASE_URL}/auth/me", headers=headers)
        user_info = response.json()
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['name']} (ID: {user_info['id']})")
        break
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")

if not token:
    print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –Ω–∏ —Å –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
    print("\nüí° –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API:")
    print("   curl -X POST http://localhost:8000/auth/signup \\")
    print('     -H "Content-Type: application/json" \\')
    print('     -d \'{"email": "test@example.com", "password": "test123", "name": "Test User"}\'')
    exit(1)

# –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
headers = {"Authorization": f"Bearer {token}"}

print("\n" + "=" * 60)
print("üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
print("=" * 60)

# 1. –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
print("\n1Ô∏è‚É£ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
response = requests.get(f"{API_BASE_URL}/orders/", headers=headers)
if response.status_code == 200:
    orders = response.json()
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")

    if orders:
        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        historical_products = set()
        for order in orders[:10]:
            for item in order['items']:
                historical_products.add(item['product_id'])
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(historical_products)}")

# 2. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ POPULAR
print("\n2Ô∏è‚É£ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
response = requests.get(f"{API_BASE_URL}/recommendations/?model_type=popular&limit=10", headers=headers)
if response.status_code == 200:
    popular_recs = response.json()
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(popular_recs)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

    for i, rec in enumerate(popular_recs[:5]):
        print(f"   {i + 1}. {rec['product_name']} (score: {rec['score']})")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä—ã
    if orders and popular_recs:
        popular_ids = {r['product_id'] for r in popular_recs}
        repeats = popular_ids & historical_products
        print(f"\n   üìà –ê–Ω–∞–ª–∏–∑: {len(repeats)}/{len(popular_ids)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–∫—É–ø–∞–ª")
        print(f"   –≠—Ç–æ {len(repeats) / len(popular_ids) * 100:.0f}% –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

# 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ COLLABORATIVE
print("\n3Ô∏è‚É£ –ö–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
response = requests.get(f"{API_BASE_URL}/recommendations/?model_type=collaborative&limit=10", headers=headers)
if response.status_code == 200:
    collab_recs = response.json()
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(collab_recs)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

    for i, rec in enumerate(collab_recs[:5]):
        print(f"   {i + 1}. {rec['product_name']} (score: {rec['score']:.3f})")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä—ã
    if orders and collab_recs:
        collab_ids = {r['product_id'] for r in collab_recs}
        repeats = collab_ids & historical_products
        print(f"\n   üìà –ê–Ω–∞–ª–∏–∑: {len(repeats)}/{len(collab_ids)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–∫—É–ø–∞–ª")
        print(f"   –≠—Ç–æ {len(repeats) / len(collab_ids) * 100:.0f}% –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

# 4. –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
print("\n4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π...")
response = requests.get(f"{API_BASE_URL}/recommendations/preferences", headers=headers)
if response.status_code == 200:
    prefs = response.json()
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    print(f"   –õ—é–±–∏–º—ã–µ –æ—Ç–¥–µ–ª—ã: {', '.join(prefs['favorite_departments'][:3])}")
    print(f"   –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {prefs['total_orders']}")
    print(f"   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–∞–∑–∞–Ω–æ: {prefs['total_products_ordered']}")

print("\n" + "=" * 60)
print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
print("=" * 60)

print("\nüìä –í–´–í–û–î–´:")
print("1. API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
print("2. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞—é—Ç —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–∫—É–ø–∞–ª")
print("3. –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è Instacart (–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏)")