# check_db.py
import sys
from pathlib import Path
import psycopg

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from database.config import get_settings


def check_database():
    settings = get_settings()

    conn = psycopg.connect(
        host=settings.DB_HOST,
        port=settings.DB_PORT,
        user=settings.DB_USER,
        password=settings.DB_PASS,
        dbname=settings.DB_NAME
    )

    with conn.cursor() as cur:
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î:")
        print("=" * 50)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        tables = [
            ('department', '–û—Ç–¥–µ–ª—ã'),
            ('aisle', '–ü—Ä–æ—Ö–æ–¥—ã'),
            ('product', '–¢–æ–≤–∞—Ä—ã'),
            ('users', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'),
            ('orders', '–ó–∞–∫–∞–∑—ã'),
            ('orderitem', '–ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤')
        ]

        for table, name in tables:
            cur.execute(f"SELECT COUNT(*) FROM {table}")
            count = cur.fetchone()[0]
            print(f"‚úÖ {name}: {count:,}")

        print("\nüîç –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü:")
        print("=" * 50)

        # –û—Ç–¥–µ–ª—ã
        cur.execute('SELECT * FROM department LIMIT 5')
        departments = cur.fetchall()
        print("üè™ –û–¢–î–ï–õ–´:")
        for dept in departments:
            print(f"  {dept}")

        # –ü—Ä–æ—Ö–æ–¥—ã
        cur.execute('SELECT * FROM aisle LIMIT 5')
        aisles = cur.fetchall()
        print("\nüõí –ü–†–û–•–û–î–´:")
        for aisle in aisles:
            print(f"  {aisle}")

        # –¢–æ–≤–∞—Ä—ã
        cur.execute('SELECT * FROM product LIMIT 5')
        products = cur.fetchall()
        print("\nü•´ –¢–û–í–ê–†–´:")
        for product in products:
            print(f"  {product}")

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        cur.execute('SELECT * FROM users LIMIT 5')
        users = cur.fetchall()
        print("\nüë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:")
        for user in users:
            print(f"  {user}")

        # –ó–∞–∫–∞–∑—ã
        cur.execute('SELECT * FROM orders LIMIT 5')
        orders = cur.fetchall()
        print("\nüìã –ó–ê–ö–ê–ó–´:")
        for order in orders:
            print(f"  {order}")

        # –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤
        cur.execute('SELECT * FROM orderitem LIMIT 5')
        order_items = cur.fetchall()
        print("\nüõçÔ∏è –ü–û–ó–ò–¶–ò–ò –ó–ê–ö–ê–ó–û–í:")
        for item in order_items:
            print(f"  {item}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
        print("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π:")
        print("-" * 20)

        # –ï—Å—Ç—å –ª–∏ –∑–∞–∫–∞–∑—ã –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute('SELECT COUNT(*) FROM orders o LEFT JOIN users u ON o.user_id = u.id WHERE u.id IS NULL')
        orphan_orders = cur.fetchone()[0]
        print(f"‚ùå –ó–∞–∫–∞–∑—ã –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {orphan_orders}")

        # –ï—Å—Ç—å –ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤
        cur.execute('SELECT COUNT(*) FROM orderitem oi LEFT JOIN orders o ON oi.order_id = o.id WHERE o.id IS NULL')
        orphan_items = cur.fetchone()[0]
        print(f"‚ùå –ü–æ–∑–∏—Ü–∏–∏ –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤: {orphan_items}")

        # –ï—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –æ—Ç–¥–µ–ª–æ–≤/–ø—Ä–æ—Ö–æ–¥–æ–≤
        cur.execute('SELECT COUNT(*) FROM product p LEFT JOIN aisle a ON p.aisle_id = a.id WHERE a.id IS NULL')
        orphan_products_aisle = cur.fetchone()[0]
        print(f"‚ùå –¢–æ–≤–∞—Ä—ã –±–µ–∑ –ø—Ä–æ—Ö–æ–¥–æ–≤: {orphan_products_aisle}")

        cur.execute('SELECT COUNT(*) FROM product p LEFT JOIN department d ON p.department_id = d.id WHERE d.id IS NULL')
        orphan_products_dept = cur.fetchone()[0]
        print(f"‚ùå –¢–æ–≤–∞—Ä—ã –±–µ–∑ –æ—Ç–¥–µ–ª–æ–≤: {orphan_products_dept}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print("-" * 15)

        cur.execute('SELECT AVG(items_count) FROM (SELECT COUNT(*) as items_count FROM orderitem GROUP BY order_id) t')
        avg_items = cur.fetchone()[0]
        print(f"üìà –°—Ä–µ–¥–Ω–µ–µ –ø–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑–µ: {avg_items:.1f}")

        cur.execute('SELECT COUNT(DISTINCT user_id) FROM orders')
        active_users = cur.fetchone()[0]
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–∫–∞–∑–∞–º–∏: {active_users}")

        cur.execute('SELECT MAX(id), MIN(id) FROM users')
        user_range = cur.fetchone()
        print(f"üÜî –î–∏–∞–ø–∞–∑–æ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_range[1]} - {user_range[0]}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cur.execute('SELECT COUNT(*) FROM orders WHERE user_id <= 100')
        first_100_orders = cur.fetchone()[0]
        print(f"üìä –ó–∞–∫–∞–∑–æ–≤ —É –ø–µ—Ä–≤—ã—Ö 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {first_100_orders}")

        cur.execute('SELECT d.name, COUNT(p.id) FROM department d LEFT JOIN product p ON d.id = p.department_id GROUP BY d.name ORDER BY COUNT(p.id) DESC LIMIT 5')
        top_depts = cur.fetchall()
        print(f"\nüè™ –¢–æ–ø-5 –æ—Ç–¥–µ–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤:")
        for dept in top_depts:
            print(f"  {dept[0]}: {dept[1]} —Ç–æ–≤–∞—Ä–æ–≤")

        cur.execute('SELECT p.name, COUNT(oi.id) as order_count FROM product p JOIN orderitem oi ON p.id = oi.product_id GROUP BY p.id, p.name ORDER BY order_count DESC LIMIT 5')
        popular_products = cur.fetchall()
        print(f"\nüî• –¢–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
        for product in popular_products:
            print(f"  {product[0]}: –∑–∞–∫–∞–∑–∞–Ω–æ {product[1]} —Ä–∞–∑")

        cur.execute('SELECT u.id, u.name, COUNT(o.id) as order_count FROM users u LEFT JOIN orders o ON u.id = o.user_id GROUP BY u.id, u.name ORDER BY order_count DESC LIMIT 5')
        active_users = cur.fetchall()
        print(f"\nüëë –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        for user in active_users:
            print(f"  {user[1]} (ID: {user[0]}): {user[2]} –∑–∞–∫–∞–∑–æ–≤")

    conn.close()
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    check_database()
