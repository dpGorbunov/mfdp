#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ Instacart —Å Kaggle
"""
import os
import sys
import subprocess
import zipfile
from pathlib import Path


def check_kaggle_credentials():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Kaggle"""
    kaggle_dir = Path.home() / '.kaggle'
    kaggle_json = kaggle_dir / 'kaggle.json'

    if not kaggle_json.exists():
        print("‚ùå –§–∞–π–ª kaggle.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("\n–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:")
        print("1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ https://www.kaggle.com")
        print("2. –ü–µ—Ä–µ–π—Ç–∏ –≤ Account -> API -> Create New API Token")
        print("3. –°–∫–∞—á–∞—Ç—å kaggle.json –∏ –ø–æ–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ –≤ ~/.kaggle/")
        print("4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞: chmod 600 ~/.kaggle/kaggle.json")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if os.name != 'nt':  # –ù–µ Windows
        os.chmod(kaggle_json, 0o600)

    return True


def install_kaggle():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É kaggle –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    try:
        import kaggle
    except ImportError:
        print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É kaggle...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "kaggle"])
        print("‚úÖ Kaggle —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def download_dataset():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç —Å Kaggle"""
    data_dir = Path("data")

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    data_dir.mkdir(exist_ok=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–∞–π–ª—ã
    csv_files = list(data_dir.glob("*.csv"))
    if len(csv_files) >= 6:
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–∞–ø–∫—É data/")
        response = input("–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ? (y/n): ")
        if response.lower() != 'y':
            return True

    print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç Instacart —Å Kaggle...")

    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data
        os.chdir(data_dir)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
        result = subprocess.run([
            "kaggle", "datasets", "download",
            "-d", "yasserh/instacart-online-grocery-basket-analysis-dataset"
        ], capture_output=True, text=True)

        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result.stderr}")
            return False

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        zip_file = "instacart-online-grocery-basket-analysis-dataset.zip"
        if Path(zip_file).exists():
            print("üì¶ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤...")
            with zipfile.ZipFile(zip_file, 'r') as zip_ref:
                zip_ref.extractall('.')

            # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤
            os.remove(zip_file)
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω—ã!")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ
        os.chdir("..")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        csv_files = list(data_dir.glob("*.csv"))
        print(f"\nüìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(csv_files)}")
        for file in csv_files:
            size_mb = file.stat().st_size / (1024 * 1024)
            print(f"  - {file.name}: {size_mb:.1f} MB")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        os.chdir("..")  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üõí Smart Shop - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 40)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Kaggle
    if not check_kaggle_credentials():
        return 1

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º kaggle –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    install_kaggle()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    if download_dataset():
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –î–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ data/")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å docker-compose up -d")
        return 0
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return 1


if __name__ == "__main__":
    sys.exit(main())